Mistral Typescript Client
Summary
Mistral AI API: Our Chat Completion and Embeddings APIs specification. Create your account on La Plateforme to get access and read the docs to learn how to use it.

Table of Contents
Mistral Typescript Client
SDK Installation
Requirements
API Key Setup
SDK Example Usage
Providers' SDKs
Available Resources and Operations
Server-sent event streaming
File uploads
Retries
Error Handling
Server Selection
Custom HTTP Client
Authentication
Providers Support
Standalone functions
Debugging
Development
Contributions
SDK Installation
The SDK can be installed with either npm, pnpm, bun or yarn package managers.

NPM
npm add @mistralai/mistralai
PNPM
pnpm add @mistralai/mistralai
Bun
bun add @mistralai/mistralai
Yarn
yarn add @mistralai/mistralai zod

# Note that Yarn does not install peer dependencies automatically. You will need
# to install zod as shown above.
Requirements
For supported JavaScript runtimes, please consult RUNTIMES.md.

API Key Setup
Before you begin, you will need a Mistral AI API key.

Get your own Mistral API Key: https://docs.mistral.ai/#api-access
Set your Mistral API Key as an environment variable. You only need to do this once.
# set Mistral API Key (using zsh for example)
$ echo 'export MISTRAL_API_KEY=[your_key_here]' >> ~/.zshenv

# reload the environment (or just quit and open a new terminal)
$ source ~/.zshenv
SDK Example Usage
Create Chat Completions
This example shows how to create chat completions.

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.chat.complete({
    model: "mistral-small-latest",
    messages: [
      {
        content:
          "Who is the best French painter? Answer in one short sentence.",
        role: "user",
      },
    ],
  });

  // Handle the result
  console.log(result);
}

run();
Upload a file
This example shows how to upload a file.

import { Mistral } from "@mistralai/mistralai";
import { openAsBlob } from "node:fs";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.files.upload({
    file: await openAsBlob("example.file"),
  });

  // Handle the result
  console.log(result);
}

run();
Create Agents Completions
This example shows how to create agents completions.

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.agents.complete({
    messages: [
      {
        content:
          "Who is the best French painter? Answer in one short sentence.",
        role: "user",
      },
    ],
    agentId: "<id>",
  });

  // Handle the result
  console.log(result);
}

run();
Create Embedding Request
This example shows how to create embedding request.

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.embeddings.create({
    model: "mistral-embed",
    inputs: [
      "Embed this sentence.",
      "As well as this one.",
    ],
  });

  // Handle the result
  console.log(result);
}

run();
Providers' SDKs
We have dedicated SDKs for the following providers:

GCP
Azure
Available Resources and Operations
Available methods
agents
complete - Agents Completion
stream - Stream Agents completion
batch
batch.jobs
list - Get Batch Jobs
create - Create Batch Job
get - Get Batch Job
cancel - Cancel Batch Job
chat
complete - Chat Completion
stream - Stream chat completion
classifiers
moderate - Moderations
moderateChat - Chat Moderations
classify - Classifications
classifyChat - Chat Classifications
embeddings
create - Embeddings
files
upload - Upload File
list - List Files
retrieve - Retrieve File
delete - Delete File
download - Download File
getSignedUrl - Get Signed Url
fim
complete - Fim Completion
stream - Stream fim completion
fineTuning
fineTuning.jobs
list - Get Fine Tuning Jobs
create - Create Fine Tuning Job
get - Get Fine Tuning Job
cancel - Cancel Fine Tuning Job
start - Start Fine Tuning Job
models
list - List Models
retrieve - Retrieve Model
delete - Delete Model
update - Update Fine Tuned Model
archive - Archive Fine Tuned Model
unarchive - Unarchive Fine Tuned Model
ocr
process - OCR
Server-sent event streaming
Server-sent events are used to stream content from certain operations. These operations will expose the stream as an async iterable that can be consumed using a for await...of loop. The loop will terminate when the server no longer has any events to send and closes the underlying connection.

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.chat.stream({
    model: "mistral-small-latest",
    messages: [
      {
        content:
          "Who is the best French painter? Answer in one short sentence.",
        role: "user",
      },
    ],
  });

  for await (const event of result) {
    // Handle the event
    console.log(event);
  }
}

run();
File uploads
Certain SDK methods accept files as part of a multi-part request. It is possible and typically recommended to upload files as a stream rather than reading the entire contents into memory. This avoids excessive memory consumption and potentially crashing with out-of-memory errors when working with very large files. The following example demonstrates how to attach a file stream to a request.

[!TIP]

Depending on your JavaScript runtime, there are convenient utilities that return a handle to a file without reading the entire contents into memory:

Node.js v20+: Since v20, Node.js comes with a native openAsBlob function in node:fs.
Bun: The native Bun.file function produces a file handle that can be used for streaming file uploads.
Browsers: All supported browsers return an instance to a File when reading the value from an <input type="file"> element.
Node.js v18: A file stream can be created using the fileFrom helper from fetch-blob/from.js.
import { Mistral } from "@mistralai/mistralai";
import { openAsBlob } from "node:fs";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.files.upload({
    file: await openAsBlob("example.file"),
  });

  // Handle the result
  console.log(result);
}

run();
Retries
Some of the endpoints in this SDK support retries. If you use the SDK without any configuration, it will fall back to the default retry strategy provided by the API. However, the default retry strategy can be overridden on a per-operation basis, or across the entire SDK.

To change the default retry strategy for a single API call, simply provide a retryConfig object to the call:

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.models.list({
    retries: {
      strategy: "backoff",
      backoff: {
        initialInterval: 1,
        maxInterval: 50,
        exponent: 1.1,
        maxElapsedTime: 100,
      },
      retryConnectionErrors: false,
    },
  });

  // Handle the result
  console.log(result);
}

run();
If you'd like to override the default retry strategy for all operations that support retries, you can provide a retryConfig at SDK initialization:

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  retryConfig: {
    strategy: "backoff",
    backoff: {
      initialInterval: 1,
      maxInterval: 50,
      exponent: 1.1,
      maxElapsedTime: 100,
    },
    retryConnectionErrors: false,
  },
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.models.list();

  // Handle the result
  console.log(result);
}

run();
Error Handling
Some methods specify known errors which can be thrown. All the known errors are enumerated in the models/errors/errors.ts module. The known errors for a method are documented under the Errors tables in SDK docs. For example, the list method may throw the following errors:

Error Type	Status Code	Content Type
errors.HTTPValidationError	422	application/json
errors.SDKError	4XX, 5XX	*/*
If the method throws an error and it is not captured by the known errors, it will default to throwing a SDKError.

import { Mistral } from "@mistralai/mistralai";
import {
  HTTPValidationError,
  SDKValidationError,
} from "@mistralai/mistralai/models/errors";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  let result;
  try {
    result = await mistral.models.list();

    // Handle the result
    console.log(result);
  } catch (err) {
    switch (true) {
      // The server response does not match the expected SDK schema
      case (err instanceof SDKValidationError): {
        // Pretty-print will provide a human-readable multi-line error message
        console.error(err.pretty());
        // Raw value may also be inspected
        console.error(err.rawValue);
        return;
      }
      case (err instanceof HTTPValidationError): {
        // Handle err.data$: HTTPValidationErrorData
        console.error(err);
        return;
      }
      default: {
        // Other errors such as network errors, see HTTPClientErrors for more details
        throw err;
      }
    }
  }
}

run();
Validation errors can also occur when either method arguments or data returned from the server do not match the expected format. The SDKValidationError that is thrown as a result will capture the raw value that failed validation in an attribute called rawValue. Additionally, a pretty() method is available on this error that can be used to log a nicely formatted multi-line string since validation errors can list many issues and the plain error string may be difficult read when debugging.

In some rare cases, the SDK can fail to get a response from the server or even make the request due to unexpected circumstances such as network conditions. These types of errors are captured in the models/errors/httpclienterrors.ts module:

HTTP Client Error	Description
RequestAbortedError	HTTP request was aborted by the client
RequestTimeoutError	HTTP request timed out due to an AbortSignal signal
ConnectionError	HTTP client was unable to make a request to a server
InvalidRequestError	Any input used to create a request is invalid
UnexpectedClientError	Unrecognised or unexpected error
Server Selection
Select Server by Name
You can override the default server globally by passing a server name to the server: keyof typeof ServerList optional parameter when initializing the SDK client instance. The selected server will then be used as the default on the operations that use it. This table lists the names associated with the available servers:

Name	Server	Description
eu	https://api.mistral.ai	EU Production server
Example
import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  server: "eu",
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.models.list();

  // Handle the result
  console.log(result);
}

run();
Override Server URL Per-Client
The default server can also be overridden globally by passing a URL to the serverURL: string optional parameter when initializing the SDK client instance. For example:

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  serverURL: "https://api.mistral.ai",
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.models.list();

  // Handle the result
  console.log(result);
}

run();
Custom HTTP Client
The TypeScript SDK makes API calls using an HTTPClient that wraps the native Fetch API. This client is a thin wrapper around fetch and provides the ability to attach hooks around the request lifecycle that can be used to modify the request or handle errors and response.

The HTTPClient constructor takes an optional fetcher argument that can be used to integrate a third-party HTTP client or when writing tests to mock out the HTTP client and feed in fixtures.

The following example shows how to use the "beforeRequest" hook to to add a custom header and a timeout to requests and how to use the "requestError" hook to log errors:

import { Mistral } from "@mistralai/mistralai";
import { HTTPClient } from "@mistralai/mistralai/lib/http";

const httpClient = new HTTPClient({
  // fetcher takes a function that has the same signature as native `fetch`.
  fetcher: (request) => {
    return fetch(request);
  }
});

httpClient.addHook("beforeRequest", (request) => {
  const nextRequest = new Request(request, {
    signal: request.signal || AbortSignal.timeout(5000)
  });

  nextRequest.headers.set("x-custom-header", "custom value");

  return nextRequest;
});

httpClient.addHook("requestError", (error, request) => {
  console.group("Request Error");
  console.log("Reason:", `${error}`);
  console.log("Endpoint:", `${request.method} ${request.url}`);
  console.groupEnd();
});

const sdk = new Mistral({ httpClient });
Authentication
Per-Client Security Schemes
This SDK supports the following security scheme globally:

Name	Type	Scheme	Environment Variable
apiKey	http	HTTP Bearer	MISTRAL_API_KEY
To authenticate with the API the apiKey parameter must be set when initializing the SDK client instance. For example:

import { Mistral } from "@mistralai/mistralai";

const mistral = new Mistral({
  apiKey: process.env["MISTRAL_API_KEY"] ?? "",
});

async function run() {
  const result = await mistral.models.list();

  // Handle the result
  console.log(result);
}

run();
Providers Support
We also provide provider specific SDK for:

GCP
Azure
Standalone functions
All the methods listed above are available as standalone functions. These functions are ideal for use in applications running in the browser, serverless runtimes or other environments where application bundle size is a primary concern. When using a bundler to build your application, all unused functionality will be either excluded from the final bundle or tree-shaken away.

To read more about standalone functions, check FUNCTIONS.md.

Available standalone functions
Debugging
You can setup your SDK to emit debug logs for SDK requests and responses.

You can pass a logger that matches console's interface as an SDK option.

[!WARNING] Beware that debug logging will reveal secrets, like API tokens in headers, in log messages printed to a console or files. It's recommended to use this feature only during local development and not in production.

import { Mistral } from "@mistralai/mistralai";

const sdk = new Mistral({ debugLogger: console });
You can also enable a default debug logger by setting an environment variable MISTRAL_DEBUG to true.

Development
Contributions
While we value open-source contributions to this SDK, this library is generated programmatically. Any manual changes added to internal files will be overwritten on the next generation. We look forward to hearing your feedback. Feel free to open a PR or an issue with a proof of concept and we'll do our best to include it in a future release.

Readme
Keywords